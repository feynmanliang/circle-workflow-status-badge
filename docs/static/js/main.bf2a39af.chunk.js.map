{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CIRCLE_API_URL","CIRCLE_SVG_PASSED","CIRCLE_SVG_FAILED","projectSlug","workflowName","a","fetch","URL","method","pipelineRes","json","pipelines","mostRecentMasterPipelineId","items","filter","pipeline","vcs","branch","id","workflowRes","workflows","workflow","name","status","App","useState","undefined","imgSrc","setImgSrc","useEffect","search","window","location","params","URLSearchParams","getWorkflowStatus","get","then","src","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAGMA,EAAiB,8BACjBC,EAAoB,2DACpBC,EAAoB,2D,4CAK1B,WAAiCC,EAAaC,GAA9C,uBAAAC,EAAA,sEAC4BC,IAAM,IAAIC,IAAJ,UAAWP,EAAX,oBAAqCG,EAArC,cAA8D,CAC5FK,OAAQ,QAFZ,cACQC,EADR,gBAI0BA,EAAYC,OAJtC,cAIQC,EAJR,OAKQC,EAA6BD,EAAUE,MAAMC,QAAO,SAAAC,GAAQ,MAA2B,WAAxBA,EAASC,IAAIC,UAAqB,GAAGC,GAL5G,SAM4BZ,IAAM,IAAIC,IAAJ,UAAWP,EAAX,qBAAsCY,EAAtC,eANlC,cAMQO,EANR,iBAO0BA,EAAYT,OAPtC,WAOQU,EAPR,OASiB,WADAA,EAAUP,MAAMC,QAAO,SAAAO,GAAQ,OAAIA,EAASC,OAASlB,KAAc,GAAGmB,OARvF,0CAUWrB,GAVX,iCAYWD,GAZX,6C,sBAgCeuB,MAhBf,WAAgB,IAAD,EACeC,wBAASC,GADxB,mBACNC,EADM,KACEC,EADF,KAOb,OALAC,qBAAU,WACR,IAAMC,EAASC,OAAOC,SAASF,OACzBG,EAAS,IAAIC,gBAAgBJ,I,8CACnCK,CAAkBF,EAAOG,IAAI,eAAgBH,EAAOG,IAAI,iBAAiBC,KAAKT,KAC7E,IACED,EAID,qBAAKW,IAAKX,IAHL,cCtBIY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBJ,MAAK,YAAkD,IAA/CK,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bf2a39af.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport fetch from 'node-fetch';\n\nconst CIRCLE_API_URL = 'https://circleci.com/api/v2';\nconst CIRCLE_SVG_PASSED = 'https://circleci.com/docs/assets/img/docs/svg-passed.png';\nconst CIRCLE_SVG_FAILED = 'https://circleci.com/docs/assets/img/docs/svg-failed.png';\n\n// const projectSlug = 'gh/pytorch/vision';\n// const workflowName = 'nightly'; // TODO: ingest from query-string\n\nasync function getWorkflowStatus(projectSlug, workflowName) {\n  const pipelineRes = await fetch(new URL(`${CIRCLE_API_URL}/project/${projectSlug}/pipeline`), {\n    method: 'GET',\n  });\n  const pipelines = await pipelineRes.json();\n  const mostRecentMasterPipelineId = pipelines.items.filter(pipeline=> pipeline.vcs.branch === 'master')[0].id;\n  const workflowRes = await fetch(new URL(`${CIRCLE_API_URL}/pipeline/${mostRecentMasterPipelineId}/workflow`));\n  const workflows = await workflowRes.json();\n  const status = workflows.items.filter(workflow => workflow.name === workflowName)[0].status;\n  if (status === 'failed') {\n    return CIRCLE_SVG_FAILED;\n  } else {\n    return CIRCLE_SVG_PASSED;\n  }\n}\n\nfunction App() {\n  const [imgSrc, setImgSrc] = useState(undefined);\n  useEffect(() => {\n    const search = window.location.search;\n    const params = new URLSearchParams(search);\n    getWorkflowStatus(params.get('projectSlug'), params.get('workflowName')).then(setImgSrc);\n  }, [])\n  if (!imgSrc) {\n    return 'Loading...'\n  } else {\n    return (\n      <img src={imgSrc} />\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}